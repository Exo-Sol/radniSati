[{"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\index.js":"1","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\App.js":"2","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\SecondPage.js":"3","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\components2\\MainDiv.js":"4","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\components2\\childs\\DateChild.js":"5","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\components2\\childs\\TemplateChild.js":"6","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\components2\\Delete.js":"7","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\components2\\NukeStorage.js":"8","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\Page2.js":"9","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\firstPage\\FirstPage.js":"10","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\firstPage\\components\\DisplayThisMonthHours.js":"11","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\firstPage\\components\\addRenameJob\\NameJob.js":"12","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\firstPage\\components\\PopUp.js":"13","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\firstPage\\components\\setShift\\SetShift.js":"14","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\firstPage\\components\\setShift\\HourList.js":"15","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\firstPage\\components\\setShift\\formatDate.js":"16"},{"size":198,"mtime":1612353468344,"results":"17","hashOfConfig":"18"},{"size":2471,"mtime":1648727275746,"results":"19","hashOfConfig":"18"},{"size":4374,"mtime":1648729172933,"results":"20","hashOfConfig":"18"},{"size":1988,"mtime":1648729313670,"results":"21","hashOfConfig":"18"},{"size":351,"mtime":1648729411690,"results":"22","hashOfConfig":"18"},{"size":1041,"mtime":1613060752924,"results":"23","hashOfConfig":"18"},{"size":3439,"mtime":1648729481549,"results":"24","hashOfConfig":"18"},{"size":565,"mtime":1648727474741,"results":"25","hashOfConfig":"18"},{"size":381,"mtime":1613650690415,"results":"26","hashOfConfig":"18"},{"size":6724,"mtime":1648730425826,"results":"27","hashOfConfig":"18"},{"size":880,"mtime":1648549001397,"results":"28","hashOfConfig":"18"},{"size":813,"mtime":1648729134899,"results":"29","hashOfConfig":"18"},{"size":360,"mtime":1648729002961,"results":"30","hashOfConfig":"18"},{"size":5348,"mtime":1648729093058,"results":"31","hashOfConfig":"18"},{"size":2641,"mtime":1648730591058,"results":"32","hashOfConfig":"18"},{"size":386,"mtime":1648728801360,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"ekjzjm",{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"36"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"36"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\index.js",[],["73","74"],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\App.js",["75"],"import React, { useState } from \"react\";\r\nimport FirstPage from \"./firstPage/FirstPage\";\r\nimport SecondPage from \"./seconPage/SecondPage\";\r\nimport Page2 from \"./components/Page2\";\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport SwipeableRoutes from \"react-swipeable-routes\";\r\n\r\nconst App = () => {\r\n  // to indicate change in added time to update info to second ppage\r\n  const [change, setChange] = useState(false);\r\n  // when you \"nuke\" delete all data, also delets jobs\r\n  const [deleteAll, setDeleteAll] = useState(false);\r\n\r\n  const onAddedTime = (del = false) => {\r\n    setChange(!change);\r\n    if (del) {\r\n      setDeleteAll(!deleteAll);\r\n      console.log();\r\n    }\r\n  };\r\n  //  const FirstPage = <FirstPage onAddedTime={onAddedTime} />;\r\n  const dateObj = new Date();\r\n  const year = dateObj.getFullYear();\r\n  const retrivedObj = localStorage.getItem(year);\r\n\r\n  return (\r\n    <>\r\n      {/* conditional rendering so it dosent display table when there is no entry, this happens at the very start of use */}\r\n      {retrivedObj ? (\r\n        <Router>\r\n          <div className=\"App\">\r\n            <SwipeableRoutes>\r\n              <Route\r\n                path=\"/first\"\r\n                render={(props) => (\r\n                  <FirstPage\r\n                    {...props}\r\n                    onAddedTime={onAddedTime}\r\n                    deleteAll={deleteAll}\r\n                  />\r\n                )}\r\n              />\r\n              <Route\r\n                path=\"/second\"\r\n                render={(props) => (\r\n                  <SecondPage\r\n                    {...props}\r\n                    change={change}\r\n                    onAddedTime={onAddedTime}\r\n                  />\r\n                )}\r\n              />\r\n            </SwipeableRoutes>\r\n          </div>\r\n        </Router>\r\n      ) : (\r\n        // no data entry display first and second page\r\n        <Router>\r\n          <div className=\"App\">\r\n            <SwipeableRoutes>\r\n              <Route\r\n                path=\"/first\"\r\n                render={(props) => (\r\n                  <FirstPage\r\n                    {...props}\r\n                    onAddedTime={onAddedTime}\r\n                    deleteAll={deleteAll}\r\n                  />\r\n                )}\r\n              />\r\n              <Route path=\"/second\" render={(props) => <Page2 />} />\r\n            </SwipeableRoutes>\r\n          </div>\r\n        </Router>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\SecondPage.js",["76","77","78","79","80","81"],"import React, { useState, useEffect } from \"react\";\r\nimport MainDiv from \"./components2/MainDiv\";\r\nimport Delete from \"./components2/Delete\";\r\nimport NukeStorage from \"./components2/NukeStorage\";\r\nimport \"./styles2/styles.css\";\r\n\r\nconst SecondPage = ({ change, onAddedTime }) => {\r\n  const [toggleDropdown, setToggleDropdown] = useState(false);\r\n\r\n  /////////////////////////////getting JObs\r\n  /////////////////////////////////////////////////////////\r\n\r\n  const currentJob = localStorage.getItem(\"currentJob\");\r\n  //////////////////////////////\r\n  /////////Need to set cur job so it changes before usefeect for getting relevan array\r\n\r\n  //////////////////////////////////////////////////////////////////\r\n  const dateObj = new Date();\r\n  const [curJob, setCurJob] = useState(currentJob);\r\n  const [linkEffect, setLinkEffect] = useState(false);\r\n  const [month, setMonth] = useState(dateObj.getMonth() + 1);\r\n  const [relevantShifts, setRelevantShifts] = useState([]);\r\n\r\n  ///////////////////////////////////////////////////////////////////\r\n  const retriveArr = JSON.parse(localStorage.getItem(dateObj.getFullYear()));\r\n\r\n  //////////////////////////////////////////////////////////////////\r\n  useEffect(() => {\r\n    setCurJob(() => currentJob);\r\n    setRelevantShifts(() => []);\r\n    console.log(\"masta\");\r\n    setLinkEffect(!linkEffect);\r\n  }, [change]);\r\n  ////////////////////////////////////////////////////////////\r\n  const monthsWorked = new Set();\r\n\r\n  //////////////// populate dropdown with avaliable months /////////////////////////////////////////\r\n  if (retriveArr) {\r\n    if (Array.isArray(retriveArr)) {\r\n      retriveArr.map((ele, ind) => {\r\n        if (ele.job === currentJob) {\r\n          monthsWorked.add(ele.month);\r\n        }\r\n      });\r\n    } else {\r\n      monthsWorked.add(retriveArr.month);\r\n    }\r\n  }\r\n  /////////////////////////////\r\n  const newMonthArr = [];\r\n\r\n  monthsWorked.forEach((ele) => newMonthArr.push(parseInt(ele)));\r\n\r\n  console.log(monthsWorked);\r\n\r\n  newMonthArr.sort((a, b) => a - b);\r\n\r\n  console.log(newMonthArr);\r\n  ///////////////////////////////udating relevant data when month change or user inputs something on first page/////////////////////////////////////////////////////////////////////\r\n\r\n  useEffect(() => {\r\n    if (Array.isArray(retriveArr)) {\r\n      retriveArr.map((ele, ind) => {\r\n        if (ele.job === curJob && ele.month === month) {\r\n          setRelevantShifts((relevantShifts) => [...relevantShifts, ele]);\r\n        }\r\n      });\r\n    } else if (retriveArr) {\r\n      if (retriveArr.job === curJob && retriveArr.month === month) {\r\n        setRelevantShifts([retriveArr]);\r\n      }\r\n    }\r\n  }, [month]);\r\n\r\n  useEffect(() => {\r\n    if (Array.isArray(retriveArr)) {\r\n      retriveArr.map((ele, ind) => {\r\n        if (ele.job === curJob && ele.month === month) {\r\n          setRelevantShifts((relevantShifts) => [...relevantShifts, ele]);\r\n          console.log(curJob);\r\n        }\r\n      });\r\n    } else if (retriveArr) {\r\n      if (retriveArr.job === curJob && retriveArr.month === month) {\r\n        setRelevantShifts([retriveArr]);\r\n        console.log(curJob);\r\n      }\r\n    } else {\r\n      setRelevantShifts([]);\r\n    }\r\n    console.log(\"kokikoki\");\r\n  }, [linkEffect]);\r\n\r\n  //////////////////////////////////////////////////////////////////////////////////////////////\r\n  const dropDown = () => {\r\n    setToggleDropdown(!toggleDropdown);\r\n  };\r\n\r\n  const setClickedMonth = (e) => {\r\n    e.preventDefault(); // maybe\r\n    setMonth(parseInt(e.target.innerText));\r\n    if (month !== parseInt(e.target.innerText)) {\r\n      setRelevantShifts([]);\r\n    }\r\n    setToggleDropdown(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"curJob\">{curJob}</div>\r\n      <ul className=\"monthWhole\">\r\n        <li className=\"material-icons icons\" onClick={dropDown}>\r\n          arrow_drop_down_circle <p id=\"dropMonths\">Month {month}</p>\r\n        </li>\r\n        {toggleDropdown &&\r\n          newMonthArr.map((ele, ind) => (\r\n            <li key={ind} className=\"monthList\" onClick={setClickedMonth}>\r\n              {ele}\r\n            </li>\r\n          ))}\r\n      </ul>\r\n      {!toggleDropdown && <MainDiv data={relevantShifts} />}\r\n      <Delete relevantShifts={relevantShifts} onAddedTime={onAddedTime} />\r\n      <NukeStorage onAddedTime={onAddedTime} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SecondPage;\r\n","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\components2\\MainDiv.js",[],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\components2\\childs\\DateChild.js",[],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\components2\\childs\\TemplateChild.js",[],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\components2\\Delete.js",["82","83"],"import React, { useState, useEffect } from \"react\";\r\nimport { useSpring, animated } from \"react-spring\";\r\n\r\nconst Delete = ({ relevantShifts, onAddedTime }) => {\r\n  const [clickedDel, setClickedDel] = useState(false);\r\n  const [deleteInput, setDeleteInput] = useState(undefined);\r\n  const [forSaving, setForSaving] = useState([]);\r\n  const dateObj = new Date();\r\n\r\n  useEffect(() => {\r\n    if (forSaving && forSaving.length > 0) {\r\n      let objForSaving = JSON.stringify(forSaving);\r\n      localStorage.removeItem(dateObj.getFullYear());\r\n      localStorage.setItem(dateObj.getFullYear(), objForSaving);\r\n      onAddedTime();\r\n      setDeleteInput(undefined);\r\n    } else if (forSaving === undefined) {\r\n      localStorage.removeItem(dateObj.getFullYear());\r\n      onAddedTime();\r\n    }\r\n  }, [forSaving]);\r\n\r\n  const firstClickDel = () => {\r\n    setForSaving([]);\r\n    console.log(relevantShifts.length);\r\n    console.log(parseInt(deleteInput));\r\n    if (parseInt(deleteInput) <= relevantShifts.length) {\r\n      // delete that data, update page\r\n      delSelectedData(relevantShifts[parseInt(deleteInput) - 1]);\r\n\r\n      console.log(\"tu smo maci\");\r\n    }\r\n    setClickedDel(!clickedDel);\r\n  };\r\n\r\n  const numInput = (e) => {\r\n    setDeleteInput(e.target.value);\r\n  };\r\n  /////////////////////////////////////////////////////////////////////////////////////////////////\r\n  const contentProps = useSpring({\r\n    opacity: clickedDel ? 1 : 0,\r\n    marginLeft: clickedDel ? 0 : -300,\r\n  });\r\n  ///////////////////////////////////////////////////////////////////////////////////////////////\r\n  /////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n  const delSelectedData = (data) => {\r\n    console.log(data);\r\n    const dateObj = new Date();\r\n    const retriveArr = JSON.parse(localStorage.getItem(dateObj.getFullYear()));\r\n    console.log(retriveArr);\r\n    if (Array.isArray(retriveArr) && retriveArr.length > 1) {\r\n      retriveArr.map((ele, ind) => {\r\n        if (JSON.stringify(ele) !== JSON.stringify(data)) {\r\n          console.log(\"hit that\");\r\n          setForSaving((forSaving) => [...forSaving, ele]);\r\n        }\r\n      });\r\n    } else {\r\n      console.log(\"a moramo bit ovdi\");\r\n      setForSaving(undefined);\r\n\r\n      setDeleteInput(undefined);\r\n    }\r\n  };\r\n\r\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n  return (\r\n    <div className=\"deleteDiv\">\r\n      <span\r\n        className=\"material-icons icons\"\r\n        id=\"deleteIcon\"\r\n        onClick={firstClickDel}\r\n      >\r\n        delete\r\n      </span>\r\n      {clickedDel && (\r\n        <animated.input\r\n          type=\"number\"\r\n          inputMode=\"numeric\"\r\n          pattern=\"[0-9]*\"\r\n          className=\"inputField\"\r\n          id=\"delPlaceholder\"\r\n          name=\"workHours\"\r\n          placeholder=\"num?\"\r\n          value={deleteInput}\r\n          onChange={numInput}\r\n          style={contentProps}\r\n          autoFocus={true}\r\n          onKeyDown={(evt) =>\r\n            [\"e\", \"E\", \"+\", \"-\", \"0\"].includes(evt.key) && evt.preventDefault()\r\n          }\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Delete;\r\n","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\components2\\NukeStorage.js",[],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\Page2.js",[],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\firstPage\\FirstPage.js",["84"],"import React, { useState, useEffect } from \"react\";\nimport SetShift from \"./components/setShift/SetShift\";\nimport NameJob from \"./components/addRenameJob/NameJob\";\nimport DisplayThisMonthHours from \"./components/DisplayThisMonthHours\";\nimport { useSpring, animated } from \"react-spring\";\n\nfunction FirstPage({ onAddedTime, deleteAll }) {\n  const [jobName, setJobName] = useState(null);\n  //selected job\n  const [curJob, setCurJob] = useState(null);\n  const [addJob, setAddJob] = useState(false);\n  /// to force update on hours in a month\n  const [chageOfH, setChangeOfH] = useState(false);\n  // to toggle of display thismonthhours\n  const [displaySwitch, setDisplaySwitch] = useState(true);\n  /////////////////////Saving current job in local storage when changed for display on page 2\n  useEffect(() => {\n    localStorage.setItem(\"currentJob\", curJob);\n    /// indicate change for second page\n    /////////////////////////////////////\n    ///////////////////////////////////////\n    onAddedTime();\n  }, [curJob]);\n\n  useEffect(() => {\n    setJobName(null);\n    setCurJob(null);\n  }, [deleteAll]);\n\n  ///Retrivin Jobs from local storage on initial render\n  useEffect(() => {\n    const savedJobs = window.localStorage.getItem(\"jobs\");\n    console.log(savedJobs);\n    if (savedJobs) {\n      if (savedJobs.includes(\",\")) {\n        const array = savedJobs.split(\",\");\n        setJobName(array);\n        setCurJob(array[0]);\n      } else {\n        let x = [];\n        x.push(savedJobs);\n        setJobName(x);\n        setCurJob(savedJobs);\n      }\n    }\n  }, []);\n\n  //////////////////////initial animation\n  const springProps = useSpring({ opacity: addJob ? 0 : 1 });\n\n  //////////////////////////////////////////////////////////////////\n  const catchName = (name) => {\n    ///first check if name is enetered\n    /// check that there is no duplicates in name\n    if (name.length > 0) {\n      if (Array.isArray(jobName) && !jobName.includes(name)) {\n        setJobName([...jobName, name]);\n      } else if (!Array.isArray(jobName)) {\n        let x = [];\n        x.push(name);\n        setJobName(x);\n      } else {\n        /// show alert pointing why you cant enetr name\n        /// either you didnt type anything or name already exists\n        if (jobName.includes(name)) {\n          alert(\"Job already exists\");\n        }\n      }\n      setCurJob(name);\n      setAddJob(false);\n    }\n  };\n\n  /////saving jobs from state in local storage\n\n  useEffect(() => {\n    if (jobName) {\n      localStorage.setItem(\"jobs\", jobName);\n    } else {\n      localStorage.removeItem(\"jobs\");\n    }\n  }, [jobName]);\n  //////////////////////////////////////////////////////////\n\n  const addJobClick = () => {\n    setAddJob(true);\n  };\n\n  const deleteJobClick = () => {\n    if (window.confirm(`Izbrisi ${curJob}?`)) {\n      if (jobName && jobName.length > 1) {\n        let filteredAry = jobName.filter((e) => e !== curJob);\n        setJobName(filteredAry);\n        setCurJob(filteredAry[0]);\n      } else {\n        setJobName(null);\n        setCurJob(null);\n      }\n    }\n  };\n  ////////////////////////////////////////////////////////\n  const catchData = (dateObj, workHours, startEndTime) => {\n    // two entry formats 1.\"start time\" and \"end time\" are set 2. only shift lenght is enetered start and end are not\n    const finalObj = startEndTime.startTime\n      ? {\n          job: curJob,\n          month: dateObj.month,\n          day: dateObj.day,\n          dayName: dateObj.dayName,\n          workHours: workHours,\n          startTime: startEndTime.startTime,\n          endTime: startEndTime.endTime,\n        }\n      : {\n          job: curJob,\n          month: dateObj.month,\n          day: dateObj.day,\n          dayName: dateObj.dayName,\n          workHours: workHours,\n          startTime: \"#\",\n          endTime: \"#\",\n        };\n\n    const retrivedObj = JSON.parse(localStorage.getItem(dateObj.year));\n\n    if (Array.isArray(retrivedObj)) {\n      retrivedObj.push(finalObj);\n      let objForSaving = JSON.stringify(retrivedObj);\n      localStorage.setItem(dateObj.year, objForSaving);\n    } else if (dateObj.year in localStorage) {\n      console.log(retrivedObj);\n      let x = [];\n      console.log(typeof x);\n\n      x.push(retrivedObj);\n\n      x.push(finalObj);\n      let objForSaving = JSON.stringify(x);\n\n      localStorage.setItem(dateObj.year, objForSaving);\n    } else {\n      let storageArr = JSON.stringify(finalObj);\n      console.log(storageArr);\n      localStorage.setItem(dateObj.year, storageArr);\n    }\n    setChangeOfH(!chageOfH);\n    /// indicate change for second page\n    onAddedTime();\n  };\n  ///////////////////////////////////////////////////////////////////////////////////////\n  const backName = () => {\n    const curIndex = jobName.findIndex((ele) => ele === curJob);\n    console.log(curIndex);\n\n    if (curIndex - 1 < 0) {\n      setCurJob(jobName[jobName.length - 1]);\n    } else {\n      setCurJob(jobName[curIndex - 1]);\n    }\n  };\n\n  const fowardName = () => {\n    const curIndex = jobName.findIndex((ele) => ele === curJob);\n\n    if (curIndex + 1 > jobName.length - 1) {\n      setCurJob(jobName[0]);\n    } else {\n      setCurJob(jobName[curIndex + 1]);\n    }\n  };\n  //////////////////////////////////////////////////////////////////////////////////////\n  const jobDisplay = (\n    <div className=\"jobDispl\">\n      {jobName && jobName.length > 1 && (\n        <span className=\"material-icons jobArrow\" onClick={backName}>\n          arrow_back_ios\n        </span>\n      )}\n\n      <h4 id=\"jN\">{curJob}</h4>\n      {jobName && jobName.length > 1 && (\n        <span className=\"material-icons jobArrow\" onClick={fowardName}>\n          arrow_forward_ios\n        </span>\n      )}\n    </div>\n  );\n  ////////////////////////////////////////////////////////////////////////////\n  const catchDropdown = () => {\n    setDisplaySwitch(!displaySwitch);\n  };\n\n  ///////////////////////////////////////////////////////////////////////////\n  return (\n    <div className=\"FirstPage\">\n      {jobName && (\n        <div>\n          <button id=\"addJob\" onClick={addJobClick}>\n            Add Job\n          </button>\n          <button id=\"removeJob\" onClick={deleteJobClick}>\n            Del Job\n          </button>\n        </div>\n      )}\n      {jobName ? jobDisplay : <NameJob catchName={catchName} />}\n      {addJob && <NameJob catchName={catchName} />}\n\n      {jobName && (\n        <animated.div style={springProps}>\n          <SetShift\n            catchData={catchData}\n            curJob={curJob}\n            catchD={catchDropdown}\n          />\n        </animated.div>\n      )}\n      {jobName && displaySwitch && (\n        <DisplayThisMonthHours curJob={curJob} change={chageOfH} />\n      )}\n    </div>\n  );\n}\n\nexport default FirstPage;\n","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\firstPage\\components\\DisplayThisMonthHours.js",["85","86"],"import React, { useState } from \"react\";\r\n\r\n// this is the bottom component\r\n\r\nconst DisplayThisMonthHours = ({ curJob }) => {\r\n  const dateObj = new Date();\r\n  const retriveArr = JSON.parse(localStorage.getItem(dateObj.getFullYear()));\r\n\r\n  const month = dateObj.getMonth() + 1;\r\n\r\n  let totalH = 0;\r\n  if (retriveArr && Array.isArray(retriveArr)) {\r\n    retriveArr.map((ele, ind) => {\r\n      if (ele.month === parseInt(month) && ele.job === curJob) {\r\n        totalH += parseInt(ele.workHours);\r\n      }\r\n    });\r\n  } else if (retriveArr) {\r\n    totalH += parseInt(retriveArr.workHours);\r\n  }\r\n\r\n  let stringTotalH = totalH.toString();\r\n  let lastChar = +stringTotalH.slice(-1);\r\n\r\n  return (\r\n    <div className=\"displInfoMain\">{`${totalH} ${\r\n      lastChar === 1 ? \"sat\" : \"sati\"\r\n    } u ${month} mj. (${curJob}) `}</div>\r\n  );\r\n};\r\n\r\nexport default DisplayThisMonthHours;\r\n","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\firstPage\\components\\addRenameJob\\NameJob.js",[],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\firstPage\\components\\PopUp.js",[],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\firstPage\\components\\setShift\\SetShift.js",["87"],"import React, { useState, useEffect } from \"react\";\r\nimport HourList from \"./HourList\";\r\nimport formatDate from \"./formatDate\";\r\nimport \"../../styles/mainStyle.css\";\r\nimport PopUp from \"../PopUp\";\r\n\r\nconst SetShift = ({ catchData, curJob, catchD }) => {\r\n  const [clickCount, setClickCount] = useState(0);\r\n\r\n  //////////////////////////////////////////////////////////////\r\n  //////////////////////////////////////////////////////////////\r\n  const [selectedDay, setSelectedDay] = useState(formatDate());\r\n  ///////////////////////////////////////////////////////////////\r\n  const [workHours, setWorkHours] = useState(undefined);\r\n  //////////////////////////////////////////////////////////////\r\n  const [selectedTimes, setSelectedTimes] = useState({\r\n    startTime: null,\r\n    endTime: null,\r\n  });\r\n  //////////////////////////////////////////////////////////////\r\n  const [popUpState, setPopUpState] = useState(false);\r\n\r\n  ////////////////////////ANIMATION///////////////////////////////////////\r\n\r\n  ///////////////////////////////////////////////////////////////\r\n\r\n  // settin the displayed date <_> clicking day back or foward is hooked with useEffect to change state\r\n  //witch is date displayed visualy\r\n\r\n  useEffect(() => {\r\n    setSelectedDay(formatDate(clickCount));\r\n  }, [clickCount]);\r\n\r\n  const dayFoward = () => {\r\n    setClickCount((count) => count + 1);\r\n  };\r\n\r\n  const dayBack = () => {\r\n    setClickCount((count) => count - 1);\r\n  };\r\n\r\n  /////////////JSX variables/////////////////////////////////\r\n\r\n  const backArrow = (\r\n    <span className=\"material-icons timeArrow\" onClick={dayBack}>\r\n      arrow_back_ios\r\n    </span>\r\n  );\r\n\r\n  const fwdArrow = (\r\n    <span className=\"material-icons timeArrow\" onClick={dayFoward}>\r\n      arrow_forward_ios\r\n    </span>\r\n  );\r\n  /////////////////////////////////////////////////////////\r\n  const clickHour = (e) => {\r\n    if (!selectedTimes.startTime) {\r\n      setSelectedTimes({ ...selectedTimes, startTime: e.target.textContent });\r\n    } else if (!selectedTimes.endTime) {\r\n      // make unable to select end time lower than start time\r\n      if (parseInt(e.target.textContent) > parseInt(selectedTimes.startTime)) {\r\n        setSelectedTimes({ ...selectedTimes, endTime: e.target.textContent });\r\n      }\r\n    }\r\n  };\r\n\r\n  /////////////////////////////////////////////////////////////////////\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    if (isMounted) {\r\n      if (selectedTimes.endTime !== null) {\r\n        let derivedWorkHours = selectedTimes.endTime - selectedTimes.startTime;\r\n        setWorkHours(derivedWorkHours);\r\n      }\r\n    }\r\n    return () => {\r\n      isMounted = false;\r\n    }; // use effect cleanup to set flag false, if unmounted\r\n  }, [selectedTimes.endTime]);\r\n\r\n  ////////////////////////////////////////////////////////////////////\r\n\r\n  const hoursChange = (e) => {\r\n    setWorkHours(e.target.value);\r\n  };\r\n\r\n  //////////////////////////////////\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (\r\n      workHours > 24 ||\r\n      workHours < 0 ||\r\n      workHours === \"\" ||\r\n      workHours === undefined\r\n    ) {\r\n      alert(\"Netocno uneseni sati\");\r\n    } else if (workHours !== 0) {\r\n      catchData(selectedDay, workHours, selectedTimes);\r\n\r\n      setSelectedTimes({\r\n        startTime: null,\r\n        endTime: null,\r\n      });\r\n      /////////////////////////\r\n      setPopUpState(true);\r\n      setTimeout(() => {\r\n        setPopUpState(false);\r\n      }, 800);\r\n    }\r\n  };\r\n  /////////////////////////////////////////////\r\n  const clickDelete = () => {\r\n    setWorkHours(\"\");\r\n    setSelectedTimes({\r\n      startTime: null,\r\n      endTime: null,\r\n    });\r\n  };\r\n\r\n  /////////////////////////////////////////////////////////////////////////////////////////////////\r\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  return (\r\n    <>\r\n      <div className=\"popUpWrapper\">\r\n        {popUpState ? <PopUp curJob={curJob} /> : <div></div>}\r\n      </div>\r\n      <div className=\"dateNav\">\r\n        {backArrow}\r\n\r\n        <span id=\"animateDate\">{`${selectedDay.dayName}, ${selectedDay.day}/${selectedDay.month}`}</span>\r\n        {fwdArrow}\r\n      </div>\r\n      <div className=\"flexWrapNav\">\r\n        <input\r\n          type=\"number\"\r\n          inputMode=\"numeric\"\r\n          pattern=\"[0-9]*\"\r\n          className=\"inputField\"\r\n          name=\"workHours\"\r\n          placeholder=\"shitf duration\"\r\n          value={workHours}\r\n          onChange={hoursChange}\r\n          style={{ display: \"block\" }}\r\n          autoFocus={true}\r\n          onKeyDown={(evt) =>\r\n            [\"e\", \"E\", \"+\", \"-\", \".\"].includes(evt.key) && evt.preventDefault()\r\n          }\r\n        />\r\n        <br />\r\n        <div className=\"flexWrapButtons\">\r\n          <input\r\n            type=\"submit\"\r\n            onClick={onSubmit}\r\n            value=\"Save\"\r\n            id=\"save\"\r\n            className=\"buttons\"\r\n          />\r\n\r\n          <button id=\"delete\" onClick={clickDelete} className=\"buttons\">\r\n            Del\r\n          </button>\r\n        </div>\r\n        <div className=\"hourPad\">\r\n          <HourList\r\n            clickHour={clickHour}\r\n            selectedTimes={selectedTimes}\r\n            catchD={catchD}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SetShift;\r\n","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\firstPage\\components\\setShift\\HourList.js",["88","89","90"],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\firstPage\\components\\setShift\\formatDate.js",[],{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":5,"column":42,"nodeType":"97","messageId":"98","endLine":5,"endColumn":46},{"ruleId":"99","severity":1,"message":"100","line":33,"column":6,"nodeType":"101","endLine":33,"endColumn":14,"suggestions":"102"},{"ruleId":"103","severity":1,"message":"104","line":40,"column":33,"nodeType":"105","messageId":"106","endLine":40,"endColumn":35},{"ruleId":"103","severity":1,"message":"104","line":63,"column":33,"nodeType":"105","messageId":"106","endLine":63,"endColumn":35},{"ruleId":"99","severity":1,"message":"107","line":73,"column":6,"nodeType":"101","endLine":73,"endColumn":13,"suggestions":"108"},{"ruleId":"103","severity":1,"message":"104","line":77,"column":33,"nodeType":"105","messageId":"106","endLine":77,"endColumn":35},{"ruleId":"99","severity":1,"message":"109","line":92,"column":6,"nodeType":"101","endLine":92,"endColumn":18,"suggestions":"110"},{"ruleId":"99","severity":1,"message":"111","line":21,"column":6,"nodeType":"101","endLine":21,"endColumn":17,"suggestions":"112"},{"ruleId":"103","severity":1,"message":"104","line":53,"column":33,"nodeType":"105","messageId":"106","endLine":53,"endColumn":35},{"ruleId":"99","severity":1,"message":"113","line":23,"column":6,"nodeType":"101","endLine":23,"endColumn":14,"suggestions":"114"},{"ruleId":"95","severity":1,"message":"115","line":1,"column":17,"nodeType":"97","messageId":"98","endLine":1,"endColumn":25},{"ruleId":"103","severity":1,"message":"104","line":13,"column":31,"nodeType":"105","messageId":"106","endLine":13,"endColumn":33},{"ruleId":"99","severity":1,"message":"116","line":79,"column":6,"nodeType":"101","endLine":79,"endColumn":29,"suggestions":"117"},{"ruleId":"95","severity":1,"message":"118","line":17,"column":9,"nodeType":"97","messageId":"98","endLine":17,"endColumn":14},{"ruleId":"119","severity":1,"message":"120","line":49,"column":11,"nodeType":"121","messageId":"122","endLine":49,"endColumn":13},{"ruleId":"119","severity":1,"message":"120","line":60,"column":18,"nodeType":"121","messageId":"122","endLine":60,"endColumn":20},"no-native-reassign",["123"],"no-negated-in-lhs",["124"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentJob' and 'linkEffect'. Either include them or remove the dependency array. You can also do a functional update 'setLinkEffect(l => ...)' if you only need 'linkEffect' in the 'setLinkEffect' call.","ArrayExpression",["125"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'curJob' and 'retriveArr'. Either include them or remove the dependency array.",["126"],"React Hook useEffect has missing dependencies: 'curJob', 'month', and 'retriveArr'. Either include them or remove the dependency array.",["127"],"React Hook useEffect has missing dependencies: 'dateObj' and 'onAddedTime'. Either include them or remove the dependency array. If 'onAddedTime' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["128"],"React Hook useEffect has a missing dependency: 'onAddedTime'. Either include it or remove the dependency array. If 'onAddedTime' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["129"],"'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'selectedTimes.startTime'. Either include it or remove the dependency array.",["130"],"'props' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"131","fix":"132"},{"desc":"133","fix":"134"},{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},{"desc":"139","fix":"140"},{"desc":"141","fix":"142"},"Update the dependencies array to be: [change, currentJob, linkEffect]",{"range":"143","text":"144"},"Update the dependencies array to be: [curJob, month, retriveArr]",{"range":"145","text":"146"},"Update the dependencies array to be: [curJob, linkEffect, month, retriveArr]",{"range":"147","text":"148"},"Update the dependencies array to be: [dateObj, forSaving, onAddedTime]",{"range":"149","text":"150"},"Update the dependencies array to be: [curJob, onAddedTime]",{"range":"151","text":"152"},"Update the dependencies array to be: [selectedTimes.endTime, selectedTimes.startTime]",{"range":"153","text":"154"},[1350,1358],"[change, currentJob, linkEffect]",[2664,2671],"[curJob, month, retriveArr]",[3229,3241],"[curJob, linkEffect, month, retriveArr]",[794,805],"[dateObj, forSaving, onAddedTime]",[1003,1011],"[curJob, onAddedTime]",[2732,2755],"[selectedTimes.endTime, selectedTimes.startTime]"]