[{"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\index.js":"1","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\App.js":"2","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\SecondPage.js":"3","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\components2\\MainDiv.js":"4","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\components2\\childs\\DateChild.js":"5","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\components2\\childs\\TemplateChild.js":"6","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\components2\\Delete.js":"7","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\components2\\NukeStorage.js":"8","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\Page2.js":"9","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\firstPage\\FirstPage.js":"10","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\firstPage\\components\\DisplayThisMonthHours.js":"11","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\firstPage\\components\\addRenameJob\\NameJob.js":"12","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\firstPage\\components\\PopUp.js":"13","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\firstPage\\components\\setShift\\SetShift.js":"14","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\firstPage\\components\\setShift\\HourList.js":"15","C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\firstPage\\components\\setShift\\formatDate.js":"16","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\index.js":"17","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\App.js":"18","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\components\\Page2.js":"19","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\firstPage\\FirstPage.js":"20","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\seconPage\\SecondPage.js":"21","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\components\\MessageModal.js":"22","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\seconPage\\components2\\MainDiv.js":"23","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\firstPage\\components\\setShift\\SetShift.js":"24","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\firstPage\\components\\addRenameJob\\NameJob.js":"25","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\firstPage\\components\\DisplayThisMonthHours.js":"26","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\seconPage\\components2\\Delete.js":"27","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\seconPage\\components2\\NukeStorage.js":"28","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\firstPage\\components\\PopUp.js":"29","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\firstPage\\components\\setShift\\formatDate.js":"30","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\firstPage\\components\\setShift\\HourList.js":"31","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\seconPage\\components2\\childs\\DateChild.js":"32","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\seconPage\\components2\\childs\\TemplateChild.js":"33","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\components\\modalTexts.js":"34","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\components\\Calculate.js":"35"},{"size":198,"mtime":1612353468344,"results":"36","hashOfConfig":"37"},{"size":2471,"mtime":1648727275746,"results":"38","hashOfConfig":"37"},{"size":4374,"mtime":1648729172933,"results":"39","hashOfConfig":"37"},{"size":1988,"mtime":1648729313670,"results":"40","hashOfConfig":"37"},{"size":364,"mtime":1652807736808,"results":"41","hashOfConfig":"37"},{"size":1041,"mtime":1613060752924,"results":"42","hashOfConfig":"37"},{"size":3439,"mtime":1648729481549,"results":"43","hashOfConfig":"37"},{"size":565,"mtime":1648727474741,"results":"44","hashOfConfig":"37"},{"size":381,"mtime":1613650690415,"results":"45","hashOfConfig":"37"},{"size":6979,"mtime":1652811513605,"results":"46","hashOfConfig":"37"},{"size":886,"mtime":1649241747355,"results":"47","hashOfConfig":"37"},{"size":1083,"mtime":1652811622072,"results":"48","hashOfConfig":"37"},{"size":360,"mtime":1648729002961,"results":"49","hashOfConfig":"37"},{"size":5562,"mtime":1652810868752,"results":"50","hashOfConfig":"37"},{"size":2661,"mtime":1652807467266,"results":"51","hashOfConfig":"37"},{"size":386,"mtime":1648728801360,"results":"52","hashOfConfig":"37"},{"size":198,"mtime":1612353468344,"results":"53","hashOfConfig":"54"},{"size":2449,"mtime":1652913172110,"results":"55","hashOfConfig":"54"},{"size":488,"mtime":1653474831325,"results":"56","hashOfConfig":"54"},{"size":7837,"mtime":1653300089979,"results":"57","hashOfConfig":"54"},{"size":4912,"mtime":1653478142491,"results":"58","hashOfConfig":"54"},{"size":1046,"mtime":1653299094622,"results":"59","hashOfConfig":"54"},{"size":1907,"mtime":1653478205155,"results":"60","hashOfConfig":"54"},{"size":5651,"mtime":1653300233895,"results":"61","hashOfConfig":"54"},{"size":1083,"mtime":1652811622072,"results":"62","hashOfConfig":"54"},{"size":886,"mtime":1649241747355,"results":"63","hashOfConfig":"54"},{"size":3191,"mtime":1652913047008,"results":"64","hashOfConfig":"54"},{"size":1400,"mtime":1653468665620,"results":"65","hashOfConfig":"54"},{"size":360,"mtime":1648729002961,"results":"66","hashOfConfig":"54"},{"size":386,"mtime":1648728801360,"results":"67","hashOfConfig":"54"},{"size":2555,"mtime":1652912967166,"results":"68","hashOfConfig":"54"},{"size":361,"mtime":1653465028744,"results":"69","hashOfConfig":"54"},{"size":1222,"mtime":1653478266850,"results":"70","hashOfConfig":"54"},{"size":162,"mtime":1653296328668,"results":"71","hashOfConfig":"54"},{"size":2881,"mtime":1653479269880,"results":"72","hashOfConfig":"54"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ste1jw",{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},"xv4aja",{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"107"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"107"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"107"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"107"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"107"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"107"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"107"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152"},"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\index.js",[],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\App.js",["153"],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\SecondPage.js",["154","155","156","157","158","159"],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\components2\\MainDiv.js",[],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\components2\\childs\\DateChild.js",[],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\components2\\childs\\TemplateChild.js",[],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\components2\\Delete.js",["160","161"],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\seconPage\\components2\\NukeStorage.js",[],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\components\\Page2.js",[],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\firstPage\\FirstPage.js",["162"],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\firstPage\\components\\DisplayThisMonthHours.js",["163","164"],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\firstPage\\components\\addRenameJob\\NameJob.js",[],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\firstPage\\components\\PopUp.js",[],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\firstPage\\components\\setShift\\SetShift.js",["165"],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\firstPage\\components\\setShift\\HourList.js",["166"],"C:\\Users\\Exo\\Desktop\\Ongoing project\\radni-sati\\src\\firstPage\\components\\setShift\\formatDate.js",[],"C:\\Users\\Exo\\Desktop\\radni-sati\\src\\index.js",[],["167","168"],"C:\\Users\\Exo\\Desktop\\radni-sati\\src\\App.js",["169"],"import React, { useState } from \"react\";\r\nimport FirstPage from \"./firstPage/FirstPage\";\r\nimport SecondPage from \"./seconPage/SecondPage\";\r\nimport Page2 from \"./components/Page2\";\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport SwipeableRoutes from \"react-swipeable-routes\";\r\n\r\nconst App = () => {\r\n  // to indicate change in added time to update info to second ppage\r\n  const [change, setChange] = useState(false);\r\n  // when you \"nuke\" delete all data, also delets jobs\r\n  const [deleteAll, setDeleteAll] = useState(false);\r\n\r\n  const onAddedTime = (del = false) => {\r\n    setChange(!change);\r\n    if (del) {\r\n      setDeleteAll(!deleteAll);\r\n    }\r\n  };\r\n  //  const FirstPage = <FirstPage onAddedTime={onAddedTime} />;\r\n  const dateObj = new Date();\r\n  const year = dateObj.getFullYear();\r\n  const retrivedObj = localStorage.getItem(year);\r\n\r\n  return (\r\n    <>\r\n      {/* conditional rendering so it dosent display table when there is no entry, this happens at the very start of use */}\r\n      {retrivedObj ? (\r\n        <Router>\r\n          <div className=\"App\">\r\n            <SwipeableRoutes>\r\n              <Route\r\n                path=\"/first\"\r\n                render={(props) => (\r\n                  <FirstPage\r\n                    {...props}\r\n                    onAddedTime={onAddedTime}\r\n                    deleteAll={deleteAll}\r\n                  />\r\n                )}\r\n              />\r\n              <Route\r\n                path=\"/second\"\r\n                render={(props) => (\r\n                  <SecondPage\r\n                    {...props}\r\n                    change={change}\r\n                    onAddedTime={onAddedTime}\r\n                  />\r\n                )}\r\n              />\r\n            </SwipeableRoutes>\r\n          </div>\r\n        </Router>\r\n      ) : (\r\n        // no data entry display first and second page\r\n        <Router>\r\n          <div className=\"App\">\r\n            <SwipeableRoutes>\r\n              <Route\r\n                path=\"/first\"\r\n                render={(props) => (\r\n                  <FirstPage\r\n                    {...props}\r\n                    onAddedTime={onAddedTime}\r\n                    deleteAll={deleteAll}\r\n                  />\r\n                )}\r\n              />\r\n              <Route path=\"/second\" render={(props) => <Page2 />} />\r\n            </SwipeableRoutes>\r\n          </div>\r\n        </Router>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\components\\Page2.js",[],"C:\\Users\\Exo\\Desktop\\radni-sati\\src\\firstPage\\FirstPage.js",["170","171"],"import React, { useState, useEffect } from \"react\";\nimport SetShift from \"./components/setShift/SetShift\";\nimport NameJob from \"./components/addRenameJob/NameJob\";\nimport DisplayThisMonthHours from \"./components/DisplayThisMonthHours\";\nimport { useSpring, animated } from \"react-spring\";\nimport MessageModal from \"../components/MessageModal\";\nimport { answers } from \"../components/modalTexts\";\n\nfunction FirstPage({ onAddedTime, deleteAll }) {\n  console.log(answers);\n  const [jobName, setJobName] = useState(null);\n  //selected job\n  const [curJob, setCurJob] = useState(null);\n  const [addJob, setAddJob] = useState(false);\n  /// to force update on hours in a month\n  const [chageOfH, setChangeOfH] = useState(false);\n  // to toggle of display thismonthhours\n  const [displaySwitch, setDisplaySwitch] = useState(true);\n  /////////////////////Saving current job in local storage when changed for display on page 2\n  const [showJobArrow, setShowJobArrow] = useState(false);\n\n  ///////////////modal with portals/////////////////////////////////////\n  const [showModal, setShowModal] = useState(false);\n  const [modalMessage, setModalMessage] = useState(\"\");\n  const [modalConfirm, setModalConfirm] = useState(() => false);\n\n  const removeModal = () => {\n    setShowModal(false);\n  };\n  ////////////////////////////////////////////////////\n\n  useEffect(() => {\n    localStorage.setItem(\"currentJob\", curJob);\n    /// indicate change for second page\n\n    onAddedTime();\n  }, [curJob]);\n\n  useEffect(() => {\n    setJobName(null);\n    setCurJob(null);\n  }, [deleteAll]);\n\n  ///Retrivin Jobs from local storage on initial render\n  useEffect(() => {\n    const savedJobs = window.localStorage.getItem(\"jobs\");\n\n    if (savedJobs) {\n      if (savedJobs.includes(\",\")) {\n        const array = savedJobs.split(\",\");\n        setJobName(array);\n        setCurJob(array[0]);\n      } else {\n        let x = [];\n        x.push(savedJobs);\n        setJobName(x);\n        setCurJob(savedJobs);\n      }\n    }\n  }, []);\n\n  //////////////////////initial animation\n  const springProps = useSpring({ opacity: addJob ? 0 : 1 });\n\n  //////////////////////////////////////////////////////////////////\n  const catchName = (name) => {\n    ///first check if name is enetered\n    /// check that there is no duplicates in name\n    if (name.length > 0) {\n      if (Array.isArray(jobName) && !jobName.includes(name)) {\n        setJobName([...jobName, name]);\n      } else if (!Array.isArray(jobName)) {\n        let x = [];\n        x.push(name);\n        setJobName(x);\n      } else {\n        /// show alert pointing why you cant enetr name\n        /// either you didnt type anything or name already exists\n        if (jobName.includes(name)) {\n          setModalMessage(answers[0]);\n          setShowModal(true);\n        }\n      }\n      setCurJob(name);\n      setAddJob(false);\n    } else {\n      setAddJob(false);\n    }\n  };\n\n  /////saving jobs from state in local storage\n\n  useEffect(() => {\n    if (jobName) {\n      localStorage.setItem(\"jobs\", jobName);\n    } else {\n      localStorage.removeItem(\"jobs\");\n    }\n  }, [jobName]);\n  //////////////////////////////////////////////////////////\n\n  const addJobClick = () => {\n    setAddJob(true);\n  };\n  ///////////////////////Delete Job//////////////////////////////////////\n  const deleteJobClick = () => {\n    setModalMessage(`${answers[1]} ${curJob} ?`);\n    setShowModal(true);\n  };\n\n  useEffect(() => {\n    if (modalConfirm) {\n      if (jobName && jobName.length > 1) {\n        let filteredAry = jobName.filter((e) => e !== curJob);\n        setJobName(filteredAry);\n        setCurJob(filteredAry[0]);\n      } else {\n        setJobName(null);\n        setCurJob(null);\n      }\n    }\n    setModalConfirm(false);\n  }, [modalConfirm]);\n  //////////////////////////////////////////////////////////////////\n\n  ////////////////////////////////////////////////////////\n  const catchData = (dateObj, workHours, startEndTime) => {\n    // two entry formats 1.\"start time\" and \"end time\" are set 2. only shift lenght is enetered, without start and end time\n    const finalObj = startEndTime.startTime\n      ? {\n          job: curJob,\n          month: dateObj.month,\n          day: dateObj.day,\n          dayName: dateObj.dayName,\n          workHours: workHours,\n          startTime: startEndTime.startTime,\n          endTime: startEndTime.endTime,\n        }\n      : {\n          job: curJob,\n          month: dateObj.month,\n          day: dateObj.day,\n          dayName: dateObj.dayName,\n          workHours: workHours,\n          startTime: \"#\",\n          endTime: \"#\",\n        };\n\n    const retrivedObj = JSON.parse(localStorage.getItem(dateObj.year));\n\n    if (Array.isArray(retrivedObj)) {\n      retrivedObj.push(finalObj);\n      let objForSaving = JSON.stringify(retrivedObj);\n      localStorage.setItem(dateObj.year, objForSaving);\n    } else if (dateObj.year in localStorage) {\n      let x = [];\n\n      x.push(retrivedObj);\n\n      x.push(finalObj);\n      let objForSaving = JSON.stringify(x);\n\n      localStorage.setItem(dateObj.year, objForSaving);\n    } else {\n      let storageArr = JSON.stringify(finalObj);\n\n      localStorage.setItem(dateObj.year, storageArr);\n    }\n    setChangeOfH(!chageOfH);\n    /// indicate change for second page\n    onAddedTime();\n  };\n  ///////////////////////////////////////////////////////////////////////////////////////\n  const backName = () => {\n    const curIndex = jobName.findIndex((ele) => ele === curJob);\n\n    if (curIndex - 1 < 0) {\n      setCurJob(jobName[jobName.length - 1]);\n    } else {\n      setCurJob(jobName[curIndex - 1]);\n    }\n  };\n\n  const fowardName = () => {\n    const curIndex = jobName.findIndex((ele) => ele === curJob);\n\n    if (curIndex + 1 > jobName.length - 1) {\n      setCurJob(jobName[0]);\n    } else {\n      setCurJob(jobName[curIndex + 1]);\n    }\n  };\n  //////////////////////////////////////////////////////////////////////////////////////\n  const jobDisplay = (\n    <div className=\"jobDispl\">\n      {jobName && jobName.length > 1 && showJobArrow === true && (\n        <span className=\"material-icons jobArrow\" onClick={backName}>\n          arrow_back_ios\n        </span>\n      )}\n\n      <h4 id=\"jN\" onClick={() => setShowJobArrow(!showJobArrow)}>\n        {curJob}\n      </h4>\n\n      {jobName && jobName.length > 1 && showJobArrow === true && (\n        <span className=\"material-icons jobArrow\" onClick={fowardName}>\n          arrow_forward_ios\n        </span>\n      )}\n    </div>\n  );\n  ////////////////////////////////////////////////////////////////////////////\n  const catchDropdown = () => {\n    setDisplaySwitch(!displaySwitch);\n  };\n\n  ///////////////////////////////////////////////////////////////////////////\n  return (\n    <div className=\"FirstPage\">\n      {jobName && showJobArrow && (\n        <div>\n          <button id=\"addJob\" onClick={addJobClick}>\n            Add Job\n          </button>\n          <button id=\"removeJob\" onClick={deleteJobClick}>\n            Del Job\n          </button>\n        </div>\n      )}\n      {jobName ? (\n        jobDisplay\n      ) : (\n        <NameJob catchName={catchName} noBackButton={true} />\n      )}\n      {addJob && <NameJob catchName={catchName} />}\n\n      {jobName && (\n        <animated.div style={springProps}>\n          <SetShift\n            catchData={catchData}\n            curJob={curJob}\n            catchD={catchDropdown}\n            setModalMessage={setModalMessage}\n            setShowModal={setShowModal}\n          />\n        </animated.div>\n      )}\n      <MessageModal\n        showModal={showModal}\n        removeModal={removeModal}\n        setModalConfirm={setModalConfirm}\n      >\n        {modalMessage}\n      </MessageModal>\n      {jobName && displaySwitch && (\n        <DisplayThisMonthHours curJob={curJob} change={chageOfH} />\n      )}\n    </div>\n  );\n}\n\nexport default FirstPage;\n","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\seconPage\\SecondPage.js",["172","173","174","175","176","177"],"import React, { useState, useEffect } from \"react\";\r\nimport MainDiv from \"./components2/MainDiv\";\r\nimport Delete from \"./components2/Delete\";\r\nimport NukeStorage from \"./components2/NukeStorage\";\r\nimport Calculate from \"../components/Calculate\";\r\nimport \"./styles2/styles.css\";\r\n\r\nconst SecondPage = ({ change, onAddedTime }) => {\r\n  const [toggleDropdown, setToggleDropdown] = useState(false);\r\n\r\n  /////////////////////////////getting JObs\r\n  /////////////////////////////////////////////////////////\r\n\r\n  const currentJob = localStorage.getItem(\"currentJob\");\r\n  //////////////////////////////\r\n  /////////Need to set cur job so it changes before usefeect for getting relevan array\r\n\r\n  //////////////////////////////////////////////////////////////////\r\n  const dateObj = new Date();\r\n  const [curJob, setCurJob] = useState(currentJob);\r\n  const [linkEffect, setLinkEffect] = useState(false);\r\n  const [month, setMonth] = useState(dateObj.getMonth() + 1);\r\n  const [relevantShifts, setRelevantShifts] = useState([]);\r\n\r\n  ///////////////////////////CALC SALARY/////////////////////////////////\r\n  const [calcSall, setCalcSall] = useState(false);\r\n  const [totHours, setTotHours] = useState(0);\r\n\r\n  const calculateSallary = (number) => {\r\n    setCalcSall(!calcSall);\r\n    setTotHours(number);\r\n  };\r\n  ////////////////////////////////////////////////////////////////////////\r\n  /////////////////////////////////////////////////////////////////////////\r\n\r\n  ///////////////////////////////////////////////////////////////////\r\n  const retriveArr = JSON.parse(localStorage.getItem(dateObj.getFullYear()));\r\n\r\n  //////////////////////////////////////////////////////////////////\r\n  useEffect(() => {\r\n    setCurJob(() => currentJob);\r\n    setRelevantShifts(() => []);\r\n\r\n    setLinkEffect(!linkEffect);\r\n  }, [change]);\r\n  ////////////////////////////////////////////////////////////\r\n  const monthsWorked = new Set();\r\n\r\n  //////////////// populate dropdown with avaliable months /////////////////////////////////////////\r\n  if (retriveArr) {\r\n    if (Array.isArray(retriveArr)) {\r\n      retriveArr.map((ele, ind) => {\r\n        if (ele.job === currentJob) {\r\n          monthsWorked.add(ele.month);\r\n        }\r\n      });\r\n    } else {\r\n      monthsWorked.add(retriveArr.month);\r\n    }\r\n  }\r\n  /////////////////////////////\r\n  const newMonthArr = [];\r\n\r\n  monthsWorked.forEach((ele) => newMonthArr.push(parseInt(ele)));\r\n\r\n  newMonthArr.sort((a, b) => a - b);\r\n\r\n  ///////////////////////////////udating relevant data when month change or user inputs something on first page/////////////////////////////////////////////////////////////////////\r\n\r\n  useEffect(() => {\r\n    if (Array.isArray(retriveArr)) {\r\n      retriveArr.map((ele, ind) => {\r\n        if (ele.job === curJob && ele.month === month) {\r\n          setRelevantShifts((relevantShifts) => [...relevantShifts, ele]);\r\n        }\r\n      });\r\n    } else if (retriveArr) {\r\n      if (retriveArr.job === curJob && retriveArr.month === month) {\r\n        setRelevantShifts([retriveArr]);\r\n      }\r\n    }\r\n  }, [month]);\r\n\r\n  useEffect(() => {\r\n    if (Array.isArray(retriveArr)) {\r\n      retriveArr.map((ele, ind) => {\r\n        if (ele.job === curJob && ele.month === month) {\r\n          setRelevantShifts((relevantShifts) => [...relevantShifts, ele]);\r\n        }\r\n      });\r\n    } else if (retriveArr) {\r\n      if (retriveArr.job === curJob && retriveArr.month === month) {\r\n        setRelevantShifts([retriveArr]);\r\n      }\r\n    } else {\r\n      setRelevantShifts([]);\r\n    }\r\n    return () => setRelevantShifts([]);\r\n  }, [linkEffect]);\r\n\r\n  //////////////////////////////////////////////////////////////////////////////////////////////\r\n  const dropDown = () => {\r\n    setToggleDropdown(!toggleDropdown);\r\n  };\r\n\r\n  const setClickedMonth = (e) => {\r\n    e.preventDefault(); // maybe\r\n    setMonth(parseInt(e.target.innerText));\r\n    if (month !== parseInt(e.target.innerText)) {\r\n      setRelevantShifts([]);\r\n    }\r\n    setToggleDropdown(false);\r\n  };\r\n\r\n  return !calcSall ? (\r\n    <div>\r\n      <div className=\"curJob\">{curJob}</div>\r\n      <ul className=\"monthWhole\">\r\n        <li className=\"material-icons icons\" onClick={dropDown}>\r\n          arrow_drop_down_circle <p id=\"dropMonths\">Month {month}</p>\r\n        </li>\r\n        {toggleDropdown &&\r\n          newMonthArr.map((ele, ind) => (\r\n            <li key={ind} className=\"monthList\" onClick={setClickedMonth}>\r\n              {ele}\r\n            </li>\r\n          ))}\r\n      </ul>\r\n      {!toggleDropdown && (\r\n        <MainDiv data={relevantShifts} calc={calculateSallary} />\r\n      )}\r\n      <Delete relevantShifts={relevantShifts} onAddedTime={onAddedTime} />\r\n      <NukeStorage onAddedTime={onAddedTime} />\r\n    </div>\r\n  ) : (\r\n    <Calculate\r\n      back={calculateSallary}\r\n      cur={curJob}\r\n      totHours={totHours}\r\n      change={change}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SecondPage;\r\n","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\components\\MessageModal.js",[],"C:\\Users\\Exo\\Desktop\\radni-sati\\src\\seconPage\\components2\\MainDiv.js",[],"C:\\Users\\Exo\\Desktop\\radni-sati\\src\\firstPage\\components\\setShift\\SetShift.js",["178"],"import React, { useState, useEffect } from \"react\";\r\nimport HourList from \"./HourList\";\r\nimport formatDate from \"./formatDate\";\r\nimport \"../../styles/mainStyle.css\";\r\nimport PopUp from \"../PopUp\";\r\n\r\nconst SetShift = ({\r\n  catchData,\r\n  curJob,\r\n  catchD,\r\n  setModalMessage,\r\n  setShowModal,\r\n}) => {\r\n  const [clickCount, setClickCount] = useState(0);\r\n\r\n  //////////////////////////////////////////////////////////////\r\n  //////////////////////////////////////////////////////////////\r\n  const [selectedDay, setSelectedDay] = useState(formatDate());\r\n  ///////////////////////////////////////////////////////////////\r\n  const [workHours, setWorkHours] = useState(\"shift duration\");\r\n  //////////////////////////////////////////////////////////////\r\n  const [selectedTimes, setSelectedTimes] = useState({\r\n    startTime: null,\r\n    endTime: null,\r\n  });\r\n  //////////////////////////////////////////////////////////////\r\n  const [popUpState, setPopUpState] = useState(false);\r\n  const [showDateArrow, setShowDateArrow] = useState(false);\r\n\r\n  ////////////////////////ANIMATION///////////////////////////////////////\r\n\r\n  ///////////////////////////////////////////////////////////////\r\n\r\n  // settin the displayed date <_> clicking day back or foward is hooked with useEffect to change state\r\n  //witch is date displayed visualy\r\n\r\n  useEffect(() => {\r\n    setSelectedDay(formatDate(clickCount));\r\n  }, [clickCount]);\r\n\r\n  const dayFoward = () => {\r\n    setClickCount((count) => count + 1);\r\n  };\r\n\r\n  const dayBack = () => {\r\n    setClickCount((count) => count - 1);\r\n  };\r\n\r\n  /////////////JSX variables/////////////////////////////////\r\n\r\n  const backArrow = (\r\n    <span className=\"material-icons timeArrow\" onClick={dayBack}>\r\n      arrow_back_ios\r\n    </span>\r\n  );\r\n\r\n  const fwdArrow = (\r\n    <span className=\"material-icons timeArrow\" onClick={dayFoward}>\r\n      arrow_forward_ios\r\n    </span>\r\n  );\r\n  /////////////////////////////////////////////////////////\r\n  const clickHour = (e) => {\r\n    if (!selectedTimes.startTime) {\r\n      setSelectedTimes({ ...selectedTimes, startTime: e.target.textContent });\r\n    } else if (!selectedTimes.endTime) {\r\n      // make unable to select end time lower than start time\r\n      if (parseInt(e.target.textContent) > parseInt(selectedTimes.startTime)) {\r\n        setSelectedTimes({ ...selectedTimes, endTime: e.target.textContent });\r\n      }\r\n    }\r\n  };\r\n\r\n  /////////////////////////////////////////////////////////////////////\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    if (isMounted) {\r\n      if (selectedTimes.endTime !== null) {\r\n        let derivedWorkHours = selectedTimes.endTime - selectedTimes.startTime;\r\n        setWorkHours(derivedWorkHours);\r\n      }\r\n    }\r\n    return () => {\r\n      isMounted = false;\r\n    }; // use effect cleanup to set flag false, if unmounted\r\n  }, [selectedTimes.endTime]);\r\n\r\n  ////////////////////////////////////////////////////////////////////\r\n\r\n  const hoursChange = (e) => {\r\n    setWorkHours(e.target.value);\r\n  };\r\n\r\n  //////////////////////////////////\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (\r\n      workHours > 24 ||\r\n      workHours < 0 ||\r\n      workHours === \"\" ||\r\n      workHours === undefined\r\n    ) {\r\n      setModalMessage(\"Incorrect shift duration\");\r\n      setShowModal(true);\r\n    } else if (workHours !== 0) {\r\n      catchData(selectedDay, workHours, selectedTimes);\r\n\r\n      setSelectedTimes({\r\n        startTime: null,\r\n        endTime: null,\r\n      });\r\n      /////////////////////////\r\n      setPopUpState(true);\r\n      setTimeout(() => {\r\n        setPopUpState(false);\r\n      }, 800);\r\n    }\r\n  };\r\n  /////////////////////////////////////////////\r\n  const clickDelete = () => {\r\n    setWorkHours(\"\");\r\n    setSelectedTimes({\r\n      startTime: null,\r\n      endTime: null,\r\n    });\r\n  };\r\n\r\n  /////////////////////////////////////////////////////////////////////////////////////////////////\r\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  return (\r\n    <>\r\n      <div className=\"popUpWrapper\">\r\n        {popUpState ? <PopUp curJob={curJob} /> : <div></div>}\r\n      </div>\r\n      <div className=\"dateNav\">\r\n        {showDateArrow ? backArrow : <span></span>}\r\n\r\n        <span\r\n          id=\"animateDate\"\r\n          onClick={() => setShowDateArrow(!showDateArrow)}\r\n        >{`${selectedDay.dayName}, ${selectedDay.day}/${selectedDay.month}`}</span>\r\n        {showDateArrow ? fwdArrow : <span></span>}\r\n      </div>\r\n      <div className=\"flexWrapNav\">\r\n        <input\r\n          type=\"number\"\r\n          inputMode=\"numeric\"\r\n          pattern=\"[0-9]*\"\r\n          className=\"inputField\"\r\n          name=\"workHours\"\r\n          placeholder=\"shitf duration\"\r\n          value={workHours}\r\n          onChange={hoursChange}\r\n          style={{ display: \"block\" }}\r\n          autoFocus={true}\r\n          onKeyDown={(evt) =>\r\n            [\"e\", \"E\", \"+\", \"-\", \".\"].includes(evt.key) && evt.preventDefault()\r\n          }\r\n        />\r\n        <br />\r\n        <div className=\"flexWrapButtons\">\r\n          <input\r\n            type=\"submit\"\r\n            onClick={onSubmit}\r\n            value=\"Save\"\r\n            id=\"save\"\r\n            className=\"buttons\"\r\n          />\r\n\r\n          <button id=\"delete\" onClick={clickDelete} className=\"buttons\">\r\n            Del\r\n          </button>\r\n        </div>\r\n        <div className=\"hourPad\">\r\n          <HourList\r\n            clickHour={clickHour}\r\n            selectedTimes={selectedTimes}\r\n            catchD={catchD}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SetShift;\r\n","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\firstPage\\components\\addRenameJob\\NameJob.js",[],"C:\\Users\\Exo\\Desktop\\radni-sati\\src\\firstPage\\components\\DisplayThisMonthHours.js",["179","180"],"import React, { useState } from \"react\";\r\n\r\n// this is the bottom component\r\n\r\nconst DisplayThisMonthHours = ({ curJob }) => {\r\n  const dateObj = new Date();\r\n  const retriveArr = JSON.parse(localStorage.getItem(dateObj.getFullYear()));\r\n\r\n  const month = dateObj.getMonth() + 1;\r\n\r\n  let totalH = 0;\r\n  if (retriveArr && Array.isArray(retriveArr)) {\r\n    retriveArr.map((ele, ind) => {\r\n      if (ele.month === parseInt(month) && ele.job === curJob) {\r\n        totalH += parseInt(ele.workHours);\r\n      }\r\n    });\r\n  } else if (retriveArr) {\r\n    totalH += parseInt(retriveArr.workHours);\r\n  }\r\n\r\n  let stringTotalH = totalH.toString();\r\n  let lastChar = +stringTotalH.slice(-1);\r\n\r\n  return (\r\n    <div className=\"displInfoMain\">{`${totalH} ${\r\n      lastChar === 1 ? \"hour\" : \"hours\"\r\n    } in ${month}. month (${curJob}) `}</div>\r\n  );\r\n};\r\n\r\nexport default DisplayThisMonthHours;\r\n","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\seconPage\\components2\\Delete.js",["181","182"],"import React, { useState, useEffect } from \"react\";\r\nimport { useSpring, animated } from \"react-spring\";\r\n\r\nconst Delete = ({ relevantShifts, onAddedTime }) => {\r\n  const [clickedDel, setClickedDel] = useState(false);\r\n  const [deleteInput, setDeleteInput] = useState(undefined);\r\n  const [forSaving, setForSaving] = useState([]);\r\n  const dateObj = new Date();\r\n\r\n  useEffect(() => {\r\n    if (forSaving && forSaving.length > 0) {\r\n      let objForSaving = JSON.stringify(forSaving);\r\n      localStorage.removeItem(dateObj.getFullYear());\r\n      localStorage.setItem(dateObj.getFullYear(), objForSaving);\r\n      onAddedTime();\r\n      setDeleteInput(undefined);\r\n    } else if (forSaving === undefined) {\r\n      localStorage.removeItem(dateObj.getFullYear());\r\n      onAddedTime();\r\n    }\r\n  }, [forSaving]);\r\n\r\n  const firstClickDel = () => {\r\n    setForSaving([]);\r\n\r\n    if (parseInt(deleteInput) <= relevantShifts.length) {\r\n      // delete that data, update page\r\n      delSelectedData(relevantShifts[parseInt(deleteInput) - 1]);\r\n    }\r\n    setClickedDel(!clickedDel);\r\n  };\r\n\r\n  const numInput = (e) => {\r\n    setDeleteInput(e.target.value);\r\n  };\r\n  /////////////////////////////////////////////////////////////////////////////////////////////////\r\n  const contentProps = useSpring({\r\n    opacity: clickedDel ? 1 : 0,\r\n    marginLeft: clickedDel ? 0 : -300,\r\n  });\r\n  ///////////////////////////////////////////////////////////////////////////////////////////////\r\n  /////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n  const delSelectedData = (data) => {\r\n    const dateObj = new Date();\r\n    const retriveArr = JSON.parse(localStorage.getItem(dateObj.getFullYear()));\r\n\r\n    if (Array.isArray(retriveArr) && retriveArr.length > 1) {\r\n      retriveArr.map((ele, ind) => {\r\n        if (JSON.stringify(ele) !== JSON.stringify(data)) {\r\n          setForSaving((forSaving) => [...forSaving, ele]);\r\n        }\r\n      });\r\n    } else {\r\n      setForSaving(undefined);\r\n      setDeleteInput(undefined);\r\n    }\r\n  };\r\n\r\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n  return (\r\n    <div className=\"deleteDiv\">\r\n      <span\r\n        className=\"material-icons icons\"\r\n        id=\"deleteIcon\"\r\n        onClick={firstClickDel}\r\n      >\r\n        delete\r\n      </span>\r\n      {clickedDel && (\r\n        <animated.input\r\n          type=\"number\"\r\n          inputMode=\"numeric\"\r\n          pattern=\"[0-9]*\"\r\n          className=\"inputField\"\r\n          id=\"delPlaceholder\"\r\n          name=\"workHours\"\r\n          placeholder=\"num?\"\r\n          value={deleteInput}\r\n          onChange={numInput}\r\n          style={contentProps}\r\n          autoFocus={true}\r\n          onKeyDown={(evt) =>\r\n            [\"e\", \"E\", \"+\", \"-\", \"0\"].includes(evt.key) && evt.preventDefault()\r\n          }\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Delete;\r\n","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\seconPage\\components2\\NukeStorage.js",["183","184"],"import React, { useState, useEffect } from \"react\";\r\nimport nuke from \"../../Icons/nucle2.png\";\r\nimport MessageModal from \"../../components/MessageModal\";\r\n\r\nconst NukeStorage = ({ onAddedTime }) => {\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [modalConfirm, setModalConfirm] = useState(() => false);\r\n  const [modalMessage, setModalMessage] = useState(\r\n    \"Warrning! \\n ALL entries will be deleted. \\n Proceed ?\"\r\n  );\r\n\r\n  const removeModal = () => {\r\n    setShowModal(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (modalConfirm) {\r\n      localStorage.clear();\r\n      onAddedTime(true);\r\n      window.alert(\"Deleted !\");\r\n      setModalConfirm(false);\r\n    }\r\n  }, [modalConfirm]);\r\n\r\n  const deleteAll = () => {\r\n    setShowModal(true);\r\n    // if (\r\n    //   window.confirm(\r\n    //     \"Jeste li sigurni da zelite nepovratno izbrisati SVE podatke ?\"\r\n    //   )\r\n    // ) {\r\n    //   localStorage.clear();\r\n    //   onAddedTime(true);\r\n    //   window.alert(\"Izbrisano\");\r\n    // } else {\r\n    //   // Do nothing!\r\n    // }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <img src={nuke} className=\"nuke\" onClick={deleteAll} alt=\"deleteAll\" />\r\n      <MessageModal\r\n        showModal={showModal}\r\n        setModalConfirm={setModalConfirm}\r\n        removeModal={removeModal}\r\n      >\r\n        {modalMessage}\r\n      </MessageModal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NukeStorage;\r\n","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\firstPage\\components\\PopUp.js",[],"C:\\Users\\Exo\\Desktop\\radni-sati\\src\\firstPage\\components\\setShift\\formatDate.js",[],"C:\\Users\\Exo\\Desktop\\radni-sati\\src\\firstPage\\components\\setShift\\HourList.js",["185"],"import React, { useState } from \"react\";\r\nimport { useSpring, animated, useTransition } from \"react-spring\";\r\nimport \"../../styles/mainStyle.css\";\r\n\r\nconst HList = ({ clickHour, selectedTimes, catchD }) => {\r\n  // create an array of jobe time stamps, for now\r\n  const arr = [];\r\n  ////////////////////////\r\n  const [displaySelector, changeDisplySelector] = useState(false);\r\n\r\n  /////////////////////////////ANIMATION///////////////////////////////////////\r\n  const props = useSpring({\r\n    config: { duration: 1250 },\r\n    opacity: 1,\r\n    from: { opacity: 0 },\r\n  });\r\n\r\n  const transitions = useTransition(displaySelector, null, {\r\n    from: { opacity: 0 },\r\n    enter: { opacity: 1 },\r\n    leave: { opacity: 0 },\r\n  });\r\n  ///////////////////////////////////////////////////////////////\r\n\r\n  const startStyle = {\r\n    backgroundColor: \"#5de6da\",\r\n    color: \"black\",\r\n    border: \"none\",\r\n  };\r\n\r\n  const endStyle = {\r\n    backgroundColor: \"#ee3968\",\r\n    color: \"black\",\r\n    border: \"none\",\r\n  };\r\n\r\n  const resetSyle = {\r\n    border: \"gray 1px solid\",\r\n    color: \"black\",\r\n    backgroundColor: \"azure\",\r\n  };\r\n\r\n  for (let i = 7; i <= 24; i++) {\r\n    if (i === parseInt(selectedTimes.startTime)) {\r\n      arr.push(\r\n        <h1\r\n          onClick={clickHour}\r\n          className=\"numberList\"\r\n          style={startStyle}\r\n          key={i}\r\n        >\r\n          {i}\r\n        </h1>\r\n      );\r\n    } else if (i === parseInt(selectedTimes.endTime)) {\r\n      arr.push(\r\n        <h1 onClick={clickHour} className=\"numberList\" style={endStyle} key={i}>\r\n          {i}\r\n        </h1>\r\n      );\r\n    } else {\r\n      arr.push(\r\n        <h1\r\n          onClick={clickHour}\r\n          className=\"numberList\"\r\n          style={resetSyle}\r\n          key={i}\r\n        >\r\n          {i}\r\n        </h1>\r\n      );\r\n    }\r\n  }\r\n\r\n  const hClick = () => {\r\n    changeDisplySelector(!displaySelector);\r\n    catchD();\r\n  };\r\n\r\n  return displaySelector ? (\r\n    transitions.map(\r\n      ({ item, key, props }) =>\r\n        item && (\r\n          <animated.div className=\"hourSelect\" key={key} style={props}>\r\n            {arr}\r\n            <span\r\n              className=\"material-icons numberList hButton\"\r\n              onClick={hClick}\r\n              style={resetSyle}\r\n            >\r\n              eject\r\n            </span>\r\n          </animated.div>\r\n        )\r\n    )\r\n  ) : (\r\n    <span\r\n      className=\"material-icons numberList hButton\"\r\n      onClick={hClick}\r\n      style={resetSyle}\r\n    >\r\n      query_builder\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default HList;\r\n","C:\\Users\\Exo\\Desktop\\radni-sati\\src\\seconPage\\components2\\childs\\DateChild.js",[],"C:\\Users\\Exo\\Desktop\\radni-sati\\src\\seconPage\\components2\\childs\\TemplateChild.js",[],"C:\\Users\\Exo\\Desktop\\radni-sati\\src\\components\\modalTexts.js",[],"C:\\Users\\Exo\\Desktop\\radni-sati\\src\\components\\Calculate.js",["186"],"import React, { useState, useEffect } from \"react\";\r\n\r\nconst Calculate = ({ back, cur, totHours, change }) => {\r\n  const [pay, setPay] = useState();\r\n  const [retrivedPay, setRetrivedPay] = useState(localStorage.getItem(cur));\r\n\r\n  useEffect(() => {\r\n    setRetrivedPay(localStorage.getItem(cur));\r\n    return () => back();\r\n  }, [cur, change]);\r\n\r\n  const payMent = (e) => {\r\n    setPay(e.target.value);\r\n  };\r\n\r\n  const goBack = () => {\r\n    back();\r\n  };\r\n\r\n  const savePay = () => {\r\n    localStorage.setItem(cur, pay);\r\n    setRetrivedPay(pay);\r\n  };\r\n\r\n  const changeSallary = () => {\r\n    localStorage.removeItem(cur);\r\n    setPay(false);\r\n    setRetrivedPay(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"calculate\">\r\n        <div className=\"calcSheet\">\r\n          Job : <p style={{ color: \"#ff8b42\", display: \"inline\" }}> {cur}</p>\r\n        </div>\r\n        {retrivedPay ? (\r\n          <>\r\n            <div className=\"calcSheet\" id=\"earnd\">\r\n              Money earned :{\" \"}\r\n              <p style={{ color: \"#1EE6BE\", display: \"inline\" }}>\r\n                {parseInt(retrivedPay) * totHours}\r\n              </p>\r\n            </div>\r\n            <div className=\"calcSheet\">\r\n              Hours worked :{\" \"}\r\n              <p style={{ color: \"#FF5A82\", display: \"inline\" }}>{totHours}</p>{\" \"}\r\n            </div>\r\n            <div className=\"calcSheet\">\r\n              Salary per hour :{\" \"}\r\n              <p style={{ color: \"#F5CD00\", display: \"inline\" }}>\r\n                {retrivedPay}\r\n              </p>{\" \"}\r\n            </div>\r\n            <br></br>\r\n            <div className=\"calcButtonWrap\">\r\n              <button onClick={goBack} className=\"calcButton\">\r\n                {\" \"}\r\n                Back\r\n              </button>\r\n              <button onClick={changeSallary} className=\"calcButton\">\r\n                Change salary per hour \"{cur}\"\r\n              </button>{\" \"}\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <input\r\n              type=\"number\"\r\n              inputMode=\"numeric\"\r\n              pattern=\"[0-9]*\"\r\n              className=\"inputField\"\r\n              name=\"Placa po satu\"\r\n              placeholder=\"hour salary\"\r\n              value={pay}\r\n              onChange={payMent}\r\n              style={{ display: \"block\" }}\r\n              onKeyDown={(evt) =>\r\n                [\"e\", \"E\", \"+\", \"-\", \".\"].includes(evt.key) &&\r\n                evt.preventDefault()\r\n              }\r\n            />\r\n            <div className=\"bContainer\">\r\n              <button onClick={savePay} className=\"calcButton2\">\r\n                Save\r\n              </button>\r\n              <button onClick={goBack} className=\"calcButton2\">\r\n                {\" \"}\r\n                Back\r\n              </button>\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Calculate;\r\n",{"ruleId":"187","severity":1,"message":"188","line":5,"column":42,"nodeType":"189","messageId":"190","endLine":5,"endColumn":46},{"ruleId":"191","severity":1,"message":"192","line":33,"column":6,"nodeType":"193","endLine":33,"endColumn":14,"suggestions":"194"},{"ruleId":"195","severity":1,"message":"196","line":40,"column":33,"nodeType":"197","messageId":"198","endLine":40,"endColumn":35},{"ruleId":"195","severity":1,"message":"196","line":63,"column":33,"nodeType":"197","messageId":"198","endLine":63,"endColumn":35},{"ruleId":"191","severity":1,"message":"199","line":73,"column":6,"nodeType":"193","endLine":73,"endColumn":13,"suggestions":"200"},{"ruleId":"195","severity":1,"message":"196","line":77,"column":33,"nodeType":"197","messageId":"198","endLine":77,"endColumn":35},{"ruleId":"191","severity":1,"message":"201","line":92,"column":6,"nodeType":"193","endLine":92,"endColumn":18,"suggestions":"202"},{"ruleId":"191","severity":1,"message":"203","line":21,"column":6,"nodeType":"193","endLine":21,"endColumn":17,"suggestions":"204"},{"ruleId":"195","severity":1,"message":"196","line":53,"column":33,"nodeType":"197","messageId":"198","endLine":53,"endColumn":35},{"ruleId":"191","severity":1,"message":"205","line":24,"column":6,"nodeType":"193","endLine":24,"endColumn":14,"suggestions":"206"},{"ruleId":"187","severity":1,"message":"207","line":1,"column":17,"nodeType":"189","messageId":"190","endLine":1,"endColumn":25},{"ruleId":"195","severity":1,"message":"196","line":13,"column":31,"nodeType":"197","messageId":"198","endLine":13,"endColumn":33},{"ruleId":"191","severity":1,"message":"208","line":80,"column":6,"nodeType":"193","endLine":80,"endColumn":29,"suggestions":"209"},{"ruleId":"187","severity":1,"message":"210","line":17,"column":9,"nodeType":"189","messageId":"190","endLine":17,"endColumn":14},{"ruleId":"211","replacedBy":"212"},{"ruleId":"213","replacedBy":"214"},{"ruleId":"187","severity":1,"message":"188","line":5,"column":42,"nodeType":"189","messageId":"190","endLine":5,"endColumn":46},{"ruleId":"191","severity":1,"message":"205","line":37,"column":6,"nodeType":"193","endLine":37,"endColumn":14,"suggestions":"215"},{"ruleId":"191","severity":1,"message":"216","line":123,"column":6,"nodeType":"193","endLine":123,"endColumn":20,"suggestions":"217"},{"ruleId":"191","severity":1,"message":"192","line":45,"column":6,"nodeType":"193","endLine":45,"endColumn":14,"suggestions":"218"},{"ruleId":"195","severity":1,"message":"196","line":52,"column":33,"nodeType":"197","messageId":"198","endLine":52,"endColumn":35},{"ruleId":"195","severity":1,"message":"196","line":72,"column":33,"nodeType":"197","messageId":"198","endLine":72,"endColumn":35},{"ruleId":"191","severity":1,"message":"199","line":82,"column":6,"nodeType":"193","endLine":82,"endColumn":13,"suggestions":"219"},{"ruleId":"195","severity":1,"message":"196","line":86,"column":33,"nodeType":"197","messageId":"198","endLine":86,"endColumn":35},{"ruleId":"191","severity":1,"message":"201","line":99,"column":6,"nodeType":"193","endLine":99,"endColumn":18,"suggestions":"220"},{"ruleId":"191","severity":1,"message":"208","line":86,"column":6,"nodeType":"193","endLine":86,"endColumn":29,"suggestions":"221"},{"ruleId":"187","severity":1,"message":"207","line":1,"column":17,"nodeType":"189","messageId":"190","endLine":1,"endColumn":25},{"ruleId":"195","severity":1,"message":"196","line":13,"column":31,"nodeType":"197","messageId":"198","endLine":13,"endColumn":33},{"ruleId":"191","severity":1,"message":"203","line":21,"column":6,"nodeType":"193","endLine":21,"endColumn":17,"suggestions":"222"},{"ruleId":"195","severity":1,"message":"196","line":49,"column":33,"nodeType":"197","messageId":"198","endLine":49,"endColumn":35},{"ruleId":"187","severity":1,"message":"223","line":8,"column":24,"nodeType":"189","messageId":"190","endLine":8,"endColumn":39},{"ruleId":"191","severity":1,"message":"205","line":23,"column":6,"nodeType":"193","endLine":23,"endColumn":20,"suggestions":"224"},{"ruleId":"187","severity":1,"message":"210","line":12,"column":9,"nodeType":"189","messageId":"190","endLine":12,"endColumn":14},{"ruleId":"191","severity":1,"message":"225","line":10,"column":6,"nodeType":"193","endLine":10,"endColumn":19,"suggestions":"226"},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentJob' and 'linkEffect'. Either include them or remove the dependency array. You can also do a functional update 'setLinkEffect(l => ...)' if you only need 'linkEffect' in the 'setLinkEffect' call.","ArrayExpression",["227"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'curJob' and 'retriveArr'. Either include them or remove the dependency array.",["228"],"React Hook useEffect has missing dependencies: 'curJob', 'month', and 'retriveArr'. Either include them or remove the dependency array.",["229"],"React Hook useEffect has missing dependencies: 'dateObj' and 'onAddedTime'. Either include them or remove the dependency array. If 'onAddedTime' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["230"],"React Hook useEffect has a missing dependency: 'onAddedTime'. Either include it or remove the dependency array. If 'onAddedTime' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["231"],"'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'selectedTimes.startTime'. Either include it or remove the dependency array.",["232"],"'props' is assigned a value but never used.","no-native-reassign",["233"],"no-negated-in-lhs",["234"],["235"],"React Hook useEffect has missing dependencies: 'curJob' and 'jobName'. Either include them or remove the dependency array.",["236"],["237"],["238"],["239"],["240"],["241"],"'setModalMessage' is assigned a value but never used.",["242"],"React Hook useEffect has a missing dependency: 'back'. Either include it or remove the dependency array. If 'back' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["243"],{"desc":"244","fix":"245"},{"desc":"246","fix":"247"},{"desc":"248","fix":"249"},{"desc":"250","fix":"251"},{"desc":"252","fix":"253"},{"desc":"254","fix":"255"},"no-global-assign","no-unsafe-negation",{"desc":"252","fix":"256"},{"desc":"257","fix":"258"},{"desc":"244","fix":"259"},{"desc":"246","fix":"260"},{"desc":"248","fix":"261"},{"desc":"254","fix":"262"},{"desc":"250","fix":"263"},{"desc":"264","fix":"265"},{"desc":"266","fix":"267"},"Update the dependencies array to be: [change, currentJob, linkEffect]",{"range":"268","text":"269"},"Update the dependencies array to be: [curJob, month, retriveArr]",{"range":"270","text":"271"},"Update the dependencies array to be: [curJob, linkEffect, month, retriveArr]",{"range":"272","text":"273"},"Update the dependencies array to be: [dateObj, forSaving, onAddedTime]",{"range":"274","text":"275"},"Update the dependencies array to be: [curJob, onAddedTime]",{"range":"276","text":"277"},"Update the dependencies array to be: [selectedTimes.endTime, selectedTimes.startTime]",{"range":"278","text":"279"},{"range":"280","text":"277"},"Update the dependencies array to be: [curJob, jobName, modalConfirm]",{"range":"281","text":"282"},{"range":"283","text":"269"},{"range":"284","text":"271"},{"range":"285","text":"273"},{"range":"286","text":"279"},{"range":"287","text":"275"},"Update the dependencies array to be: [modalConfirm, onAddedTime]",{"range":"288","text":"289"},"Update the dependencies array to be: [cur, change, back]",{"range":"290","text":"291"},[1350,1358],"[change, currentJob, linkEffect]",[2664,2671],"[curJob, month, retriveArr]",[3229,3241],"[curJob, linkEffect, month, retriveArr]",[794,805],"[dateObj, forSaving, onAddedTime]",[1062,1070],"[curJob, onAddedTime]",[2801,2824],"[selectedTimes.endTime, selectedTimes.startTime]",[1473,1481],[3737,3751],"[curJob, jobName, modalConfirm]",[1810,1818],[3063,3070],[3577,3589],[2849,2872],[794,805],[688,702],"[modalConfirm, onAddedTime]",[330,343],"[cur, change, back]"]